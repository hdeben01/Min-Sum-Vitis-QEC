-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_row_operations_compute_row_operations_Pipeline_VITIS_LOOP_23_3_VITIS_LOOP_25_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem1_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_WREADY : IN STD_LOGIC;
    m_axi_gmem1_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem1_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_RVALID : IN STD_LOGIC;
    m_axi_gmem1_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem1_0_RLAST : IN STD_LOGIC;
    m_axi_gmem1_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmem1_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_BVALID : IN STD_LOGIC;
    m_axi_gmem1_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln23 : IN STD_LOGIC_VECTOR (62 downto 0);
    non_zero_cache_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    non_zero_cache_ce0 : OUT STD_LOGIC;
    non_zero_cache_we0 : OUT STD_LOGIC;
    non_zero_cache_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    non_zero_cache_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    non_zero_cache_1_ce0 : OUT STD_LOGIC;
    non_zero_cache_1_we0 : OUT STD_LOGIC;
    non_zero_cache_1_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    non_zero_cache_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    non_zero_cache_2_ce0 : OUT STD_LOGIC;
    non_zero_cache_2_we0 : OUT STD_LOGIC;
    non_zero_cache_2_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    non_zero_cache_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    non_zero_cache_3_ce0 : OUT STD_LOGIC;
    non_zero_cache_3_we0 : OUT STD_LOGIC;
    non_zero_cache_3_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    non_zero_cache_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    non_zero_cache_4_ce0 : OUT STD_LOGIC;
    non_zero_cache_4_we0 : OUT STD_LOGIC;
    non_zero_cache_4_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    non_zero_cache_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    non_zero_cache_5_ce0 : OUT STD_LOGIC;
    non_zero_cache_5_we0 : OUT STD_LOGIC;
    non_zero_cache_5_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    non_zero_cache_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    non_zero_cache_6_ce0 : OUT STD_LOGIC;
    non_zero_cache_6_we0 : OUT STD_LOGIC;
    non_zero_cache_6_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    non_zero_cache_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    non_zero_cache_7_ce0 : OUT STD_LOGIC;
    non_zero_cache_7_we0 : OUT STD_LOGIC;
    non_zero_cache_7_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    non_zero_cache_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    non_zero_cache_8_ce0 : OUT STD_LOGIC;
    non_zero_cache_8_we0 : OUT STD_LOGIC;
    non_zero_cache_8_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    non_zero_cache_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    non_zero_cache_9_ce0 : OUT STD_LOGIC;
    non_zero_cache_9_we0 : OUT STD_LOGIC;
    non_zero_cache_9_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of compute_row_operations_compute_row_operations_Pipeline_VITIS_LOOP_23_3_VITIS_LOOP_25_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln23_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln25_reg_496 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op33_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln23_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem1_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln23_reg_482_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_486 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_486_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_fu_314_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln23_reg_492 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln23_reg_492_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln25_fu_322_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln25_reg_496_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_addr_read_reg_500 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_empty_phi_fu_260_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_257 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln25_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln23_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shiftreg6_fu_100 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_104 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln25_fu_348_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_108 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln23_2_fu_389_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten26_fu_112 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln23_fu_299_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten26_load : STD_LOGIC_VECTOR (4 downto 0);
    signal non_zero_cache_8_we0_local : STD_LOGIC;
    signal trunc_ln27_fu_425_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal non_zero_cache_8_ce0_local : STD_LOGIC;
    signal non_zero_cache_7_we0_local : STD_LOGIC;
    signal non_zero_cache_7_ce0_local : STD_LOGIC;
    signal non_zero_cache_6_we0_local : STD_LOGIC;
    signal non_zero_cache_6_ce0_local : STD_LOGIC;
    signal non_zero_cache_5_we0_local : STD_LOGIC;
    signal non_zero_cache_5_ce0_local : STD_LOGIC;
    signal non_zero_cache_4_we0_local : STD_LOGIC;
    signal non_zero_cache_4_ce0_local : STD_LOGIC;
    signal non_zero_cache_3_we0_local : STD_LOGIC;
    signal non_zero_cache_3_ce0_local : STD_LOGIC;
    signal non_zero_cache_2_we0_local : STD_LOGIC;
    signal non_zero_cache_2_ce0_local : STD_LOGIC;
    signal non_zero_cache_1_we0_local : STD_LOGIC;
    signal non_zero_cache_1_ce0_local : STD_LOGIC;
    signal non_zero_cache_we0_local : STD_LOGIC;
    signal non_zero_cache_ce0_local : STD_LOGIC;
    signal non_zero_cache_9_we0_local : STD_LOGIC;
    signal non_zero_cache_9_ce0_local : STD_LOGIC;
    signal add_ln23_1_fu_383_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln23_1_fu_376_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component compute_row_operations_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component compute_row_operations_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_1_fu_108 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i_1_fu_108 <= select_ln23_2_fu_389_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten26_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln23_fu_293_p2 = ap_const_lv1_0))) then 
                    indvar_flatten26_fu_112 <= add_ln23_fu_299_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten26_fu_112 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln23_fu_293_p2 = ap_const_lv1_0))) then 
                    j_fu_104 <= add_ln25_fu_348_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_104 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    shiftreg6_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    shiftreg6_fu_100 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    shiftreg6_fu_100 <= ap_phi_mux_empty_phi_fu_260_p4(15 downto 8);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                gmem1_addr_read_reg_500 <= m_axi_gmem1_0_RDATA;
                icmp_ln23_reg_482 <= icmp_ln23_fu_293_p2;
                icmp_ln23_reg_482_pp0_iter1_reg <= icmp_ln23_reg_482;
                icmp_ln25_reg_486 <= icmp_ln25_fu_308_p2;
                icmp_ln25_reg_486_pp0_iter1_reg <= icmp_ln25_reg_486;
                select_ln23_reg_492 <= select_ln23_fu_314_p3;
                select_ln23_reg_492_pp0_iter1_reg <= select_ln23_reg_492;
                trunc_ln25_reg_496 <= trunc_ln25_fu_322_p1;
                trunc_ln25_reg_496_pp0_iter1_reg <= trunc_ln25_reg_496;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln23_1_fu_383_p2 <= std_logic_vector(unsigned(i_1_fu_108) + unsigned(ap_const_lv2_1));
    add_ln23_fu_299_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten26_load) + unsigned(ap_const_lv5_1));
    add_ln25_fu_348_p2 <= std_logic_vector(unsigned(select_ln23_fu_314_p3) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_gmem1_0_RVALID, ap_predicate_op33_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op33_read_state2 = ap_const_boolean_1) and (m_axi_gmem1_0_RVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln23_fu_293_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln23_fu_293_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_empty_phi_fu_260_p4_assign_proc : process(icmp_ln23_reg_482_pp0_iter1_reg, trunc_ln25_reg_496_pp0_iter1_reg, gmem1_addr_read_reg_500, ap_phi_reg_pp0_iter2_empty_reg_257, zext_ln25_fu_410_p1)
    begin
        if ((icmp_ln23_reg_482_pp0_iter1_reg = ap_const_lv1_0)) then
            if ((trunc_ln25_reg_496_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_empty_phi_fu_260_p4 <= zext_ln25_fu_410_p1;
            elsif ((trunc_ln25_reg_496_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_empty_phi_fu_260_p4 <= gmem1_addr_read_reg_500;
            else 
                ap_phi_mux_empty_phi_fu_260_p4 <= ap_phi_reg_pp0_iter2_empty_reg_257;
            end if;
        else 
            ap_phi_mux_empty_phi_fu_260_p4 <= ap_phi_reg_pp0_iter2_empty_reg_257;
        end if; 
    end process;

    ap_phi_reg_pp0_iter2_empty_reg_257 <= "XXXXXXXXXXXXXXXX";

    ap_predicate_op33_read_state2_assign_proc : process(icmp_ln23_reg_482, trunc_ln25_reg_496)
    begin
                ap_predicate_op33_read_state2 <= ((trunc_ln25_reg_496 = ap_const_lv1_0) and (icmp_ln23_reg_482 = ap_const_lv1_0));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten26_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten26_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten26_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten26_load <= indvar_flatten26_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_104)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_104;
        end if; 
    end process;


    gmem1_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem1_0_RVALID, ap_predicate_op33_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op33_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem1_blk_n_R <= m_axi_gmem1_0_RVALID;
        else 
            gmem1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln23_fu_293_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten26_load = ap_const_lv5_1E) else "0";
    icmp_ln25_fu_308_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_A) else "0";
    m_axi_gmem1_0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_0_ARID <= ap_const_lv1_0;
    m_axi_gmem1_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem1_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_0_AWID <= ap_const_lv1_0;
    m_axi_gmem1_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_0_BREADY <= ap_const_logic_0;

    m_axi_gmem1_0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op33_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op33_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_gmem1_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem1_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_0_WDATA <= ap_const_lv16_0;
    m_axi_gmem1_0_WID <= ap_const_lv1_0;
    m_axi_gmem1_0_WLAST <= ap_const_logic_0;
    m_axi_gmem1_0_WSTRB <= ap_const_lv2_0;
    m_axi_gmem1_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_0_WVALID <= ap_const_logic_0;
    non_zero_cache_1_address0 <= zext_ln23_fu_396_p1(2 - 1 downto 0);
    non_zero_cache_1_ce0 <= non_zero_cache_1_ce0_local;

    non_zero_cache_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            non_zero_cache_1_ce0_local <= ap_const_logic_1;
        else 
            non_zero_cache_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_1_d0 <= trunc_ln27_fu_425_p1;
    non_zero_cache_1_we0 <= non_zero_cache_1_we0_local;

    non_zero_cache_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln23_reg_492_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_1))) then 
            non_zero_cache_1_we0_local <= ap_const_logic_1;
        else 
            non_zero_cache_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_2_address0 <= zext_ln23_fu_396_p1(2 - 1 downto 0);
    non_zero_cache_2_ce0 <= non_zero_cache_2_ce0_local;

    non_zero_cache_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            non_zero_cache_2_ce0_local <= ap_const_logic_1;
        else 
            non_zero_cache_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_2_d0 <= trunc_ln27_fu_425_p1;
    non_zero_cache_2_we0 <= non_zero_cache_2_we0_local;

    non_zero_cache_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln23_reg_492_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_2))) then 
            non_zero_cache_2_we0_local <= ap_const_logic_1;
        else 
            non_zero_cache_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_3_address0 <= zext_ln23_fu_396_p1(2 - 1 downto 0);
    non_zero_cache_3_ce0 <= non_zero_cache_3_ce0_local;

    non_zero_cache_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            non_zero_cache_3_ce0_local <= ap_const_logic_1;
        else 
            non_zero_cache_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_3_d0 <= trunc_ln27_fu_425_p1;
    non_zero_cache_3_we0 <= non_zero_cache_3_we0_local;

    non_zero_cache_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln23_reg_492_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_3))) then 
            non_zero_cache_3_we0_local <= ap_const_logic_1;
        else 
            non_zero_cache_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_4_address0 <= zext_ln23_fu_396_p1(2 - 1 downto 0);
    non_zero_cache_4_ce0 <= non_zero_cache_4_ce0_local;

    non_zero_cache_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            non_zero_cache_4_ce0_local <= ap_const_logic_1;
        else 
            non_zero_cache_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_4_d0 <= trunc_ln27_fu_425_p1;
    non_zero_cache_4_we0 <= non_zero_cache_4_we0_local;

    non_zero_cache_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln23_reg_492_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_4))) then 
            non_zero_cache_4_we0_local <= ap_const_logic_1;
        else 
            non_zero_cache_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_5_address0 <= zext_ln23_fu_396_p1(2 - 1 downto 0);
    non_zero_cache_5_ce0 <= non_zero_cache_5_ce0_local;

    non_zero_cache_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            non_zero_cache_5_ce0_local <= ap_const_logic_1;
        else 
            non_zero_cache_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_5_d0 <= trunc_ln27_fu_425_p1;
    non_zero_cache_5_we0 <= non_zero_cache_5_we0_local;

    non_zero_cache_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln23_reg_492_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_5))) then 
            non_zero_cache_5_we0_local <= ap_const_logic_1;
        else 
            non_zero_cache_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_6_address0 <= zext_ln23_fu_396_p1(2 - 1 downto 0);
    non_zero_cache_6_ce0 <= non_zero_cache_6_ce0_local;

    non_zero_cache_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            non_zero_cache_6_ce0_local <= ap_const_logic_1;
        else 
            non_zero_cache_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_6_d0 <= trunc_ln27_fu_425_p1;
    non_zero_cache_6_we0 <= non_zero_cache_6_we0_local;

    non_zero_cache_6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln23_reg_492_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_6))) then 
            non_zero_cache_6_we0_local <= ap_const_logic_1;
        else 
            non_zero_cache_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_7_address0 <= zext_ln23_fu_396_p1(2 - 1 downto 0);
    non_zero_cache_7_ce0 <= non_zero_cache_7_ce0_local;

    non_zero_cache_7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            non_zero_cache_7_ce0_local <= ap_const_logic_1;
        else 
            non_zero_cache_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_7_d0 <= trunc_ln27_fu_425_p1;
    non_zero_cache_7_we0 <= non_zero_cache_7_we0_local;

    non_zero_cache_7_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln23_reg_492_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_7))) then 
            non_zero_cache_7_we0_local <= ap_const_logic_1;
        else 
            non_zero_cache_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_8_address0 <= zext_ln23_fu_396_p1(2 - 1 downto 0);
    non_zero_cache_8_ce0 <= non_zero_cache_8_ce0_local;

    non_zero_cache_8_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            non_zero_cache_8_ce0_local <= ap_const_logic_1;
        else 
            non_zero_cache_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_8_d0 <= trunc_ln27_fu_425_p1;
    non_zero_cache_8_we0 <= non_zero_cache_8_we0_local;

    non_zero_cache_8_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln23_reg_492_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_8))) then 
            non_zero_cache_8_we0_local <= ap_const_logic_1;
        else 
            non_zero_cache_8_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_9_address0 <= zext_ln23_fu_396_p1(2 - 1 downto 0);
    non_zero_cache_9_ce0 <= non_zero_cache_9_ce0_local;

    non_zero_cache_9_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            non_zero_cache_9_ce0_local <= ap_const_logic_1;
        else 
            non_zero_cache_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_9_d0 <= trunc_ln27_fu_425_p1;
    non_zero_cache_9_we0 <= non_zero_cache_9_we0_local;

    non_zero_cache_9_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln23_reg_492_pp0_iter1_reg)
    begin
        if ((not((select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_0)) and not((select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_1)) and not((select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_2)) and not((select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_3)) and not((select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_4)) and not((select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_5)) and not((select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_6)) and not((select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_7)) and not((select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_8)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            non_zero_cache_9_we0_local <= ap_const_logic_1;
        else 
            non_zero_cache_9_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_address0 <= zext_ln23_fu_396_p1(2 - 1 downto 0);
    non_zero_cache_ce0 <= non_zero_cache_ce0_local;

    non_zero_cache_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            non_zero_cache_ce0_local <= ap_const_logic_1;
        else 
            non_zero_cache_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    non_zero_cache_d0 <= trunc_ln27_fu_425_p1;
    non_zero_cache_we0 <= non_zero_cache_we0_local;

    non_zero_cache_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln23_reg_492_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln23_reg_492_pp0_iter1_reg = ap_const_lv4_0))) then 
            non_zero_cache_we0_local <= ap_const_logic_1;
        else 
            non_zero_cache_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln23_1_fu_376_p3 <= 
        ap_const_lv8_0 when (icmp_ln25_reg_486_pp0_iter1_reg(0) = '1') else 
        shiftreg6_fu_100;
    select_ln23_2_fu_389_p3 <= 
        add_ln23_1_fu_383_p2 when (icmp_ln25_reg_486_pp0_iter1_reg(0) = '1') else 
        i_1_fu_108;
    select_ln23_fu_314_p3 <= 
        ap_const_lv4_0 when (icmp_ln25_fu_308_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    trunc_ln25_fu_322_p1 <= select_ln23_fu_314_p3(1 - 1 downto 0);
    trunc_ln27_fu_425_p1 <= ap_phi_mux_empty_phi_fu_260_p4(1 - 1 downto 0);
    zext_ln23_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_2_fu_389_p3),64));
    zext_ln25_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_1_fu_376_p3),16));
end behav;
