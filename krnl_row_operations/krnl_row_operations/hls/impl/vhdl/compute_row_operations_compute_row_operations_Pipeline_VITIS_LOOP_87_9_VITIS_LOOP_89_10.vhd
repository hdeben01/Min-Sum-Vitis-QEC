-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_row_operations_compute_row_operations_Pipeline_VITIS_LOOP_87_9_VITIS_LOOP_89_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln15 : IN STD_LOGIC_VECTOR (60 downto 0);
    L_cache_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    L_cache_ce0 : OUT STD_LOGIC;
    L_cache_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_cache_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    L_cache_1_ce0 : OUT STD_LOGIC;
    L_cache_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_cache_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    L_cache_2_ce0 : OUT STD_LOGIC;
    L_cache_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_cache_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    L_cache_3_ce0 : OUT STD_LOGIC;
    L_cache_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_cache_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    L_cache_4_ce0 : OUT STD_LOGIC;
    L_cache_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_cache_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    L_cache_5_ce0 : OUT STD_LOGIC;
    L_cache_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_cache_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    L_cache_6_ce0 : OUT STD_LOGIC;
    L_cache_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_cache_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    L_cache_7_ce0 : OUT STD_LOGIC;
    L_cache_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_cache_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    L_cache_8_ce0 : OUT STD_LOGIC;
    L_cache_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_cache_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    L_cache_9_ce0 : OUT STD_LOGIC;
    L_cache_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of compute_row_operations_compute_row_operations_Pipeline_VITIS_LOOP_87_9_VITIS_LOOP_89_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal trunc_ln89_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln87_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem0_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln89_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_684 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_684_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln87_fu_353_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln87_reg_689 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln87_reg_689_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal first_iter_2_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_2_reg_695 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln89_fu_506_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_560_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_reg_753 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal phi_ln90_fu_102 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln89_fu_568_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_106 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln89_fu_395_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_110 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln87_2_fu_367_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten33_fu_114 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln87_fu_335_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten33_load : STD_LOGIC_VECTOR (4 downto 0);
    signal L_cache_9_load1_fu_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal L_cache_8_load3_fu_122 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal L_cache_7_load5_fu_126 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal L_cache_6_load7_fu_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal L_cache_5_load9_fu_134 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal L_cache_4_load11_fu_138 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal L_cache_3_load13_fu_142 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal L_cache_2_load15_fu_146 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal L_cache_1_load17_fu_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal L_cache_load19_fu_154 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal L_cache_ce0_local : STD_LOGIC;
    signal L_cache_1_ce0_local : STD_LOGIC;
    signal L_cache_2_ce0_local : STD_LOGIC;
    signal L_cache_3_ce0_local : STD_LOGIC;
    signal L_cache_4_ce0_local : STD_LOGIC;
    signal L_cache_5_ce0_local : STD_LOGIC;
    signal L_cache_6_ce0_local : STD_LOGIC;
    signal L_cache_7_ce0_local : STD_LOGIC;
    signal L_cache_8_ce0_local : STD_LOGIC;
    signal L_cache_9_ce0_local : STD_LOGIC;
    signal add_ln87_1_fu_361_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_509_p21 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_509_p23 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln90_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln87_1_fu_469_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_8_fu_509_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_509_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_509_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_509_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_509_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_509_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_509_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_509_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_509_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_509_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component compute_row_operations_sparsemux_21_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compute_row_operations_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_21_4_32_1_1_U124 : component compute_row_operations_sparsemux_21_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => L_cache_load19_fu_154,
        din1 => L_cache_1_load17_fu_150,
        din2 => L_cache_2_load15_fu_146,
        din3 => L_cache_3_load13_fu_142,
        din4 => L_cache_4_load11_fu_138,
        din5 => L_cache_5_load9_fu_134,
        din6 => L_cache_6_load7_fu_130,
        din7 => L_cache_7_load5_fu_126,
        din8 => L_cache_8_load3_fu_122,
        din9 => L_cache_9_load1_fu_118,
        def => tmp_8_fu_509_p21,
        sel => select_ln87_reg_689_pp0_iter1_reg,
        dout => tmp_8_fu_509_p23);

    flow_control_loop_pipe_sequential_init_U : component compute_row_operations_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln87_fu_329_p2 = ap_const_lv1_0))) then 
                    i_fu_110 <= select_ln87_2_fu_367_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_110 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten33_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln87_fu_329_p2 = ap_const_lv1_0))) then 
                    indvar_flatten33_fu_114 <= add_ln87_fu_335_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten33_fu_114 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln87_fu_329_p2 = ap_const_lv1_0))) then 
                    j_fu_106 <= add_ln89_fu_395_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_106 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    phi_ln90_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_ln90_fu_102 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    phi_ln90_fu_102 <= select_ln89_fu_568_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (first_iter_2_reg_695 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                L_cache_1_load17_fu_150 <= L_cache_1_q0;
                L_cache_2_load15_fu_146 <= L_cache_2_q0;
                L_cache_3_load13_fu_142 <= L_cache_3_q0;
                L_cache_4_load11_fu_138 <= L_cache_4_q0;
                L_cache_5_load9_fu_134 <= L_cache_5_q0;
                L_cache_6_load7_fu_130 <= L_cache_6_q0;
                L_cache_7_load5_fu_126 <= L_cache_7_q0;
                L_cache_8_load3_fu_122 <= L_cache_8_q0;
                L_cache_9_load1_fu_118 <= L_cache_9_q0;
                L_cache_load19_fu_154 <= L_cache_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                first_iter_2_reg_695 <= first_iter_2_fu_375_p2;
                icmp_ln89_reg_684 <= icmp_ln89_fu_347_p2;
                icmp_ln89_reg_684_pp0_iter1_reg <= icmp_ln89_reg_684;
                select_ln87_reg_689 <= select_ln87_fu_353_p3;
                select_ln87_reg_689_pp0_iter1_reg <= select_ln87_reg_689;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                or_ln_reg_753 <= or_ln_fu_560_p3;
                trunc_ln89_reg_749 <= trunc_ln89_fu_506_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    L_cache_1_address0 <= zext_ln87_fu_381_p1(2 - 1 downto 0);
    L_cache_1_ce0 <= L_cache_1_ce0_local;

    L_cache_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            L_cache_1_ce0_local <= ap_const_logic_1;
        else 
            L_cache_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    L_cache_2_address0 <= zext_ln87_fu_381_p1(2 - 1 downto 0);
    L_cache_2_ce0 <= L_cache_2_ce0_local;

    L_cache_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            L_cache_2_ce0_local <= ap_const_logic_1;
        else 
            L_cache_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    L_cache_3_address0 <= zext_ln87_fu_381_p1(2 - 1 downto 0);
    L_cache_3_ce0 <= L_cache_3_ce0_local;

    L_cache_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            L_cache_3_ce0_local <= ap_const_logic_1;
        else 
            L_cache_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    L_cache_4_address0 <= zext_ln87_fu_381_p1(2 - 1 downto 0);
    L_cache_4_ce0 <= L_cache_4_ce0_local;

    L_cache_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            L_cache_4_ce0_local <= ap_const_logic_1;
        else 
            L_cache_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    L_cache_5_address0 <= zext_ln87_fu_381_p1(2 - 1 downto 0);
    L_cache_5_ce0 <= L_cache_5_ce0_local;

    L_cache_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            L_cache_5_ce0_local <= ap_const_logic_1;
        else 
            L_cache_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    L_cache_6_address0 <= zext_ln87_fu_381_p1(2 - 1 downto 0);
    L_cache_6_ce0 <= L_cache_6_ce0_local;

    L_cache_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            L_cache_6_ce0_local <= ap_const_logic_1;
        else 
            L_cache_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    L_cache_7_address0 <= zext_ln87_fu_381_p1(2 - 1 downto 0);
    L_cache_7_ce0 <= L_cache_7_ce0_local;

    L_cache_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            L_cache_7_ce0_local <= ap_const_logic_1;
        else 
            L_cache_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    L_cache_8_address0 <= zext_ln87_fu_381_p1(2 - 1 downto 0);
    L_cache_8_ce0 <= L_cache_8_ce0_local;

    L_cache_8_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            L_cache_8_ce0_local <= ap_const_logic_1;
        else 
            L_cache_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    L_cache_9_address0 <= zext_ln87_fu_381_p1(2 - 1 downto 0);
    L_cache_9_ce0 <= L_cache_9_ce0_local;

    L_cache_9_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            L_cache_9_ce0_local <= ap_const_logic_1;
        else 
            L_cache_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    L_cache_address0 <= zext_ln87_fu_381_p1(2 - 1 downto 0);
    L_cache_ce0 <= L_cache_ce0_local;

    L_cache_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            L_cache_ce0_local <= ap_const_logic_1;
        else 
            L_cache_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln87_1_fu_361_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv2_1));
    add_ln87_fu_335_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten33_load) + unsigned(ap_const_lv5_1));
    add_ln89_fu_395_p2 <= std_logic_vector(unsigned(select_ln87_fu_353_p3) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem0_0_WREADY, trunc_ln89_reg_749)
    begin
                ap_block_state4_io <= ((trunc_ln89_reg_749 = ap_const_lv1_1) and (m_axi_gmem0_0_WREADY = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln87_fu_329_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln87_fu_329_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_110)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_110;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten33_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten33_fu_114)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten33_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten33_load <= indvar_flatten33_fu_114;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_106;
        end if; 
    end process;

    bitcast_ln90_fu_556_p1 <= tmp_8_fu_509_p23;
    first_iter_2_fu_375_p2 <= "1" when (select_ln87_fu_353_p3 = ap_const_lv4_0) else "0";

    gmem0_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem0_0_WREADY, trunc_ln89_reg_749, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (trunc_ln89_reg_749 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            gmem0_blk_n_W <= m_axi_gmem0_0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln87_fu_329_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten33_load = ap_const_lv5_1E) else "0";
    icmp_ln89_fu_347_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_A) else "0";
    m_axi_gmem0_0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem0_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem0_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_0_BREADY <= ap_const_logic_0;
    m_axi_gmem0_0_RREADY <= ap_const_logic_0;
    m_axi_gmem0_0_WDATA <= or_ln_reg_753;
    m_axi_gmem0_0_WID <= ap_const_lv1_0;
    m_axi_gmem0_0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_0_WSTRB <= ap_const_lv8_FF;
    m_axi_gmem0_0_WUSER <= ap_const_lv1_0;

    m_axi_gmem0_0_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, trunc_ln89_reg_749, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln89_reg_749 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            m_axi_gmem0_0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln_fu_560_p3 <= (bitcast_ln90_fu_556_p1 & select_ln87_1_fu_469_p3);
    select_ln87_1_fu_469_p3 <= 
        ap_const_lv32_0 when (icmp_ln89_reg_684_pp0_iter1_reg(0) = '1') else 
        phi_ln90_fu_102;
    select_ln87_2_fu_367_p3 <= 
        add_ln87_1_fu_361_p2 when (icmp_ln89_fu_347_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln87_fu_353_p3 <= 
        ap_const_lv4_0 when (icmp_ln89_fu_347_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln89_fu_568_p3 <= 
        ap_const_lv32_0 when (trunc_ln89_fu_506_p1(0) = '1') else 
        bitcast_ln90_fu_556_p1;
    tmp_8_fu_509_p21 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln89_fu_506_p1 <= select_ln87_reg_689_pp0_iter1_reg(1 - 1 downto 0);
    zext_ln87_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln87_2_fu_367_p3),64));
end behav;
